name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - '*'  
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  DOCKER_USER: ${{ secrets.DOCKER_USER }}
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_USER }}/ms-saudacoes-aleatorias
  DOCKER_IMAGE_TAG: 1.0.${{ github.run_number }}
  SERVICE_NAME: saudacoes-aleatorias

jobs:
  # ---------------- LINT ----------------
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          # Altera a versão para '1.22.3' para ser compatível com o linter
          go-version: '1.22.3' 

      - name: Go Fmt & Vet
        run: |
          echo "Linting code with go fmt and go vet..."
          go fmt $(go list ./...)
          go vet $(go list ./...)

      - name: Run golangci-lint (v1.59.1)
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.59.1
          args: --timeout=5m --verbose

  # ---------------- TEST ----------------
  test:
    name: Run Go Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          # Altera a versão para '1.22.3' para manter a consistência
          go-version: '1.22.3'

      - name: Install gotestsum
        run: go install gotest.tools/gotestsum@latest

      - name: Run tests and generate report
        run: |
          echo "Running tests and generating report..."
          CGO_ENABLED=1 gotestsum --junitfile report.xml --format testname

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: report.xml

  # ---------------- BUILD & PUSH ----------------
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref_name == 'main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}
            ${{ env.DOCKER_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ---------------- DEPLOY ----------------
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref_name == 'main'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        id: init
        run: terraform -chdir=infra init
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}

      - name: Terraform Validate
        id: validate
        run: terraform -chdir=infra validate

      - name: Terraform Apply
        id: apply
        run: terraform -chdir=infra apply -auto-approve
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}
          TF_VAR_docker_image_name: ${{ env.DOCKER_IMAGE_NAME }}
          TF_VAR_docker_image_tag: ${{ env.DOCKER_IMAGE_TAG }}

  # ---------------- CLEANUP ----------------
  cleanup:
    name: Destroy Staging (Manual)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: staging  
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform -chdir=infra init
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}

      - name: Terraform Destroy
        run: terraform -chdir=infra destroy -auto-approve
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}
